unicode指的是万国码，是一种“字码表”。而utf-8是这种字码表储存的编码方法。
unicode不一定要由utf-8这种方式编成bytecode储存，也可以使用utf-16,utf-7等其他方式。
目前大多都以utf-8的方式来变成bytecode。

utf8 可以是byte string，对应的是utf8在内存中的字节编码，不同的编码方式在内存中对应不同的字节编码格式。
字节编码格式不等于实际的码表。可以将字节编码格式转换成对应的码表。

如果在python文件中指定编码方式为utf-8(#coding=utf-8)，
那么所有带中文的字符串都会被认为是utf-8编码的byte string（例如：mystr=”你好”），
但是在函数中所产生的字符串则被认为是unicode string。

可以将方法中产生的unicode string 编码和带中文的字符串之间相互转换。
以下有两个解决方法：
1.将字符串全都转成byte string。
self.response.out.write("你好"+self.request.get("argu").encode("utf-8"))
2.将字符串全都转成unicode string。
self.response.out.write(u"你好"+self.request.get("argu"))
byte string转换成unicode string可以这样转unicode(unicodestring, "utf-8")
